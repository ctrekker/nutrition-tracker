#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('backend:server');
const http = require('http');
const https = require('https');
const fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
let sslServer = null;
if(process.env.NODE_ENV === 'production') {
  sslServer = https.createServer({
    key: fs.readFileSync('/etc/letsencrypt/live/nutrition.burnscoding.com/privkey.pem'),
    cert: fs.readFileSync('/etc/letsencrypt/live/nutrition.burnscoding.com/cert.pem'),
    ca: fs.readFileSync('/etc/letsencrypt/live/nutrition.burnscoding.com/chain.pem'),
  }, app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

if(sslServer) {
  sslServer.listen(8443);
  sslServer.on('error', onError);
  sslServer.on('listening', onListening);
  
  // Redirect from http port 80 to https
  http.createServer(function (req, res) {
    res.writeHead(301, { 'Location': 'https://' + req.headers['host'] + req.url });
    res.end();
  }).listen(8080);
}
else {
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = (process.env.NODE_ENV === 'production' ? sslServer : server).address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
